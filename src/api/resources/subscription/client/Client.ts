/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import { CorrilyApi } from "@fern-api/corrily";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization";
import * as errors from "../../../../errors";

export declare namespace Client {
    interface Options {
        environment?: environments.CorrilyApiEnvironment | string;
        token?: core.Supplier<core.BearerToken>;
    }
}

export class Client {
    constructor(private readonly options: Client.Options) {}

    /**
     * Notify Corrily that one of your customers has started a subscription.
     */
    public async create(
        request: CorrilyApi.CreateSubscriptionRequest
    ): Promise<CorrilyApi.CreateSubscriptionResponse | undefined> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment ?? environments.CorrilyApiEnvironment.Production, "/subscriptions"),
            method: "POST",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
            body: await serializers.CreateSubscriptionRequest.json(request),
        });
        if (_response.ok) {
            return await serializers.CreateSubscriptionResponse.parse(
                _response.body as serializers.CreateSubscriptionResponse.Raw
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.CorrilyApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CorrilyApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.CorrilyApiTimeoutError();
            case "unknown":
                throw new errors.CorrilyApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Retrieve the details of a single subscription for a single customer.
     */
    public async get(
        origin: CorrilyApi.Integration,
        originId: string,
        userId: string
    ): Promise<CorrilyApi.GetSubscriptionResponse | undefined> {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.CorrilyApiEnvironment.Production,
                `/subscriptions/${userId}/${origin}/${originId}`
            ),
            method: "GET",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
        });
        if (_response.ok) {
            return await serializers.GetSubscriptionResponse.parse(
                _response.body as serializers.GetSubscriptionResponse.Raw
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.CorrilyApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CorrilyApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.CorrilyApiTimeoutError();
            case "unknown":
                throw new errors.CorrilyApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Notify Corrily that a subscription has changed.
     */
    public async update(
        origin: CorrilyApi.Integration,
        originId: string,
        userId: string,
        request: CorrilyApi.UpdateSubscriptionRequest = {}
    ): Promise<CorrilyApi.UpdateSubscriptionResponse | undefined> {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.CorrilyApiEnvironment.Production,
                `/subscriptions/${userId}/${origin}/${originId}`
            ),
            method: "POST",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
            body: await serializers.UpdateSubscriptionRequest.json(request),
        });
        if (_response.ok) {
            return await serializers.UpdateSubscriptionResponse.parse(
                _response.body as serializers.UpdateSubscriptionResponse.Raw
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.CorrilyApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CorrilyApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.CorrilyApiTimeoutError();
            case "unknown":
                throw new errors.CorrilyApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Delete Corrily's record of a subscription.
     */
    public async delete(
        origin: CorrilyApi.Integration,
        originId: string,
        userId: string
    ): Promise<CorrilyApi.DeleteSubscriptionResponse | undefined> {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.CorrilyApiEnvironment.Production,
                `/subscriptions/${userId}/${origin}/${originId}`
            ),
            method: "DELETE",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
        });
        if (_response.ok) {
            return await serializers.DeleteSubscriptionResponse.parse(
                _response.body as serializers.DeleteSubscriptionResponse.Raw
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.CorrilyApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CorrilyApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.CorrilyApiTimeoutError();
            case "unknown":
                throw new errors.CorrilyApiError({
                    message: _response.error.errorMessage,
                });
        }
    }
}
