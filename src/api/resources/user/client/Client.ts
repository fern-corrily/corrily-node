/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import { CorrilyApi } from "@fern-api/corrily";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization";
import * as errors from "../../../../errors";

export declare namespace Client {
    interface Options {
        environment?: environments.CorrilyApiEnvironment | string;
        token?: core.Supplier<core.BearerToken>;
    }
}

export class Client {
    constructor(private readonly options: Client.Options) {}

    /**
     * Link IPs to users and update user features.
     * The identify endpoint serves three purposes:
     *   1. It can be used to pass user-level features after (or before) a price has already been tied to them using the [main price endpoint](https://docs.corrily.com/api-reference/api-reference/calculate-price).
     *   2. It can be used to link IPs to user_ids so that prices persist to a user as they see a price -> login in -> check the price again.
     *   3. It is used during mobile integrations to inform Corrily about original [Apple](https://docs.corrily.com/integrations/02_apple-iap-integration) and [Google](https://docs.corrily.com/integrations/03_google-iap-integration) purchase IDs.
     *
     */
    public async identify(request: CorrilyApi.IdentifyCallRequest): Promise<CorrilyApi.IdentifyCallResponse> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment ?? environments.CorrilyApiEnvironment.Production, "/identify"),
            method: "POST",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
            body: await serializers.IdentifyCallRequest.json(request),
        });
        if (_response.ok) {
            return await serializers.IdentifyCallResponse.parse(_response.body as serializers.IdentifyCallResponse.Raw);
        }

        if (_response.error.reason === "status-code") {
            throw new errors.CorrilyApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CorrilyApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.CorrilyApiTimeoutError();
            case "unknown":
                throw new errors.CorrilyApiError({
                    message: _response.error.errorMessage,
                });
        }
    }
}
