/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../environments";
import * as core from "../../../core";
import { CorrilyApi } from "@fern-api/corrily";
import urlJoin from "url-join";
import * as serializers from "../../../serialization";

export declare namespace Client {
  interface Options {
    environment?: environments.CorrilyApiEnvironment | string;
    token?: core.Supplier<core.BearerToken>;
  }
}

export class Client {
  constructor(private readonly options: Client.Options) {}

  public async create(request: CorrilyApi.CreateSubscriptionRequest): Promise<CorrilyApi.subscription.create.Response> {
    const _response = await core.fetcher({
      url: urlJoin(this.options.environment ?? environments.CorrilyApiEnvironment.Production, "/subscriptions/"),
      method: "POST",
      headers: {
        Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
      },
      body: await serializers.subscription.create.Request.json({
        amount: request.amount,
        country: request.country,
        created: request.created,
        currency: request.currency,
        origin: request.origin,
        originId: request.originId,
        product: request.product,
        status: request.status,
        userId: request.userId,
        cancelAt: request.cancelAt,
        canceledAt: request.canceledAt,
        trialEnd: request.trialEnd,
        trialStart: request.trialStart,
      }),
    });
    if (_response.ok) {
      return {
        ok: true,
        body: await serializers.subscription.create.Response.parse(
          _response.body as serializers.subscription.create.Response.Raw
        ),
      };
    }

    return {
      ok: false,
      error: CorrilyApi.subscription.create.Error._unknown(_response.error),
    };
  }

  public async get(
    origin: CorrilyApi.Integration,
    originId: string,
    userId: string
  ): Promise<CorrilyApi.subscription.get.Response> {
    const _response = await core.fetcher({
      url: urlJoin(
        this.options.environment ?? environments.CorrilyApiEnvironment.Production,
        `/subscriptions/${userId}/${origin}/${originId}`
      ),
      method: "GET",
      headers: {
        Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
      },
    });
    if (_response.ok) {
      return {
        ok: true,
        body: await serializers.subscription.get.Response.parse(
          _response.body as serializers.subscription.get.Response.Raw
        ),
      };
    }

    return {
      ok: false,
      error: CorrilyApi.subscription.get.Error._unknown(_response.error),
    };
  }

  public async update(
    origin: CorrilyApi.Integration,
    originId: string,
    userId: string,
    request?: CorrilyApi.UpdateSubscriptionRequest
  ): Promise<CorrilyApi.subscription.update.Response> {
    const _response = await core.fetcher({
      url: urlJoin(
        this.options.environment ?? environments.CorrilyApiEnvironment.Production,
        `/subscriptions/${userId}/${origin}/${originId}`
      ),
      method: "POST",
      headers: {
        Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
      },
      body: await serializers.subscription.update.Request.json({
        amount: request?.amount,
        cancelAt: request?.cancelAt,
        canceledAt: request?.canceledAt,
        created: request?.created,
        currency: request?.currency,
        status: request?.status,
        trialStart: request?.trialStart,
        trialEnd: request?.trialEnd,
      }),
    });
    if (_response.ok) {
      return {
        ok: true,
        body: await serializers.subscription.update.Response.parse(
          _response.body as serializers.subscription.update.Response.Raw
        ),
      };
    }

    return {
      ok: false,
      error: CorrilyApi.subscription.update.Error._unknown(_response.error),
    };
  }

  public async delete(
    origin: CorrilyApi.Integration,
    originId: string,
    userId: string
  ): Promise<CorrilyApi.subscription.delete.Response> {
    const _response = await core.fetcher({
      url: urlJoin(
        this.options.environment ?? environments.CorrilyApiEnvironment.Production,
        `/subscriptions/${userId}/${origin}/${originId}`
      ),
      method: "DELETE",
      headers: {
        Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
      },
    });
    if (_response.ok) {
      return {
        ok: true,
        body: await serializers.subscription.delete.Response.parse(
          _response.body as serializers.subscription.delete.Response.Raw
        ),
      };
    }

    return {
      ok: false,
      error: CorrilyApi.subscription.delete.Error._unknown(_response.error),
    };
  }
}
