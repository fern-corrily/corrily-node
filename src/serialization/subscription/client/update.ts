/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../..";
import { CorrilyApi } from "@fern-api/corrily";
import * as core from "../../../core";

export const Request: core.schemas.Schema<
  serializers.subscription.update.Request.Raw,
  CorrilyApi.UpdateSubscriptionRequest
> = core.schemas.object({
  amount: core.schemas.number().optional(),
  cancelAt: core.schemas.property("cancel_at", core.schemas.number().optional()),
  canceledAt: core.schemas.property("canceled_at", core.schemas.number().optional()),
  created: core.schemas.number().optional(),
  currency: core.schemas.lazy(async () => (await import("../..")).Currency).optional(),
  status: core.schemas.lazy(async () => (await import("../..")).SubscriptionStatus).optional(),
  trialStart: core.schemas.property("trial_start", core.schemas.number().optional()),
  trialEnd: core.schemas.property("trial_end", core.schemas.number().optional()),
});

export declare namespace Request {
  interface Raw {
    amount?: number | null;
    cancel_at?: number | null;
    canceled_at?: number | null;
    created?: number | null;
    currency?: serializers.Currency.Raw | null;
    status?: serializers.SubscriptionStatus.Raw | null;
    trial_start?: number | null;
    trial_end?: number | null;
  }
}

export const Response: core.schemas.Schema<
  serializers.subscription.update.Response.Raw,
  CorrilyApi.UpdateSubscriptionResponse | undefined
> = core.schemas.lazy(async () => (await import("../..")).UpdateSubscriptionResponse);

export declare namespace Response {
  type Raw = serializers.UpdateSubscriptionResponse.Raw | undefined;
}
